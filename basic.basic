' TS Compete Straight Search and Destroy.BS2
' {$STAMP BS2}
' {$PBASIC 2.5}
'
'********************* Straight Search and Destroy Program ************************************
'
' Copyright Louis A. Lippincott 2013 All Rights Reserved
'
' Created by Lou Lippincott 6/21/13 to include an adjustment (AGC constant) for IR receiver sensitivity
' and a dynamic adjustment for the Line Sensors at Startup. A dynamic adjustment will
' help to compensate for changes in ambient lighting at the time of the match.
'
' A larger value for AGC will make the IR Receivers less sensitive and will shorten the "Kill-Zone."
' A smaller value for AGC will make the IR Receivers more sensitive and more prone to false triggers.
'
'
' This code is streamlined to remove most of the delays to improve response time and IR Sensor sample rate.
'
' NOTE: This software will work best with the hardware IR Sensor changes suggested by Lou Lippincott
'*********************************************************************************
'
' This program runs a straight pattern until the edge of the ring or opponent is seen, then turns or attacks.
' Use this program to compete in the ring.
'
'*************************************************************************************

' -----[ Constants ]-------------------------------------------------------

AGC          CON        06                      ' Left/Right IR Receivers AGC time in milliseconds

LFastF       CON        1000                    ' left motor fast forward
LSlowF       CON        800                     ' left motor slow forward
LStop        CON        750                     ' left motor stop
LSlowR       CON        700                     ' left motor slow reverse
LFastR       CON        500                     ' left motor fast reverse

RFastF       CON        500                     ' right motor fast forward
RSlowF       CON        700                     ' right motor slow forward
RStop        CON        750                     ' right motor stop
RSlowR       CON        800                     ' right motor slow reverse
RFastR       CON        1000                    ' right motor fast reverse

' -----[ I/O Definitions ]-------------------------------------------------

Speaker      PIN        1                       ' Speaker
RedLED       PIN        0                       ' Red LED used to show status

LIrOut       PIN        4                       ' left IR LED output
LIRIn        PIN        11                      ' left IR sensor input
RIROut       PIN        15                      ' right IR LED output
RIRIn        PIN        14                      ' right IR sensor input

LMotor       PIN        13                      ' left servo motor
RMotor       PIN        12                      ' right servo motor

LLinePower   PIN        10                      ' left line sensor power
LLineIn      PIN        9                       ' left line sensor input
RLinePower   PIN        7                       ' right line sensor power
RLineIn      PIN        8                       ' right line sensor input


' -----[ Variables ]-------------------------------------------------------

Search_count VAR        Word                    ' Count how long we're in the search mode
Ring_count   VAR        Word                    ' Count how long we're trying to avoid the edge of the ring
Run_Count    VAR        Byte                    ' Count how many matches we've played between power cycles
Delay_Count  VAR        Byte                    ' Count how many seconds since reset button
LLine        VAR        Word                    ' left sensor raw reading
RLine        VAR        Word                    ' right sensor raw reading
LBlackThresh VAR        Word                    ' QTI black threshold - Left
RBlackThresh VAR        Word                    ' QTI black threshold - Right
LineBits     VAR        Nib                     ' decoded sensors value
LbLeft       VAR        lineBits.BIT1
LbRight      VAR        lineBits.BIT0

IRBits       VAR        Nib                     ' IR readings (l & r)
IRLeft       VAR        irBits.BIT1
IRRight      VAR        irBits.BIT0

' -----[ EEPROM Data ]-----------------------------------------------------

RunCount    DATA       $00                     ' Run counter

'*****************************************************************************************
' -----[ Initialization ]--------------------------------------------------
'*****************************************************************************************
'************************** DO NOT CHANGE CODE HERE! (Rule Violation!) *******************
'*****************************************************************************************
Reset:
  LOW LMotor                                   ' Make Motor pins outputs
  LOW RMotor

  READ RunCount, Run_Count                     ' Read Run Counter
  Run_Count = Run_Count + 1                    ' Ran one more time
  WRITE RunCount, Run_Count                    ' Store it back into NVRAM
  Run_Count = Run_Count & 1                    ' Make it Odd or Even
  IF (Run_Count = 1) THEN END                  ' Run every other time reset button is pushed

Start_Delay:                                   ' five second delay
  FOR Delay_Count = 1 TO 5
    HIGH RedLED                                ' show active
    PAUSE 700
    INPUT RedLED                               ' blink each second
    FREQOUT Speaker, 300, 4000, 3300           ' beep each second
  NEXT
  Search_count = 0
  GOTO Dodge

'*****************************************************************************************
'*****************************************************************************************

' Sets black threshold to the initial reading of the two sensor readings minus an offset.
' SumoBot must be placed over black playing surface before this code runs.
' Moved this code here to allow the SumoBot to settle and shadows to retreat after Reset is pushed.

Set_Threshold:                                  ' set QTI black threshold
  GOSUB Read_Line_Sensors                       ' Higher numbers mean darker surface.
  LBlackThresh = LLine * 7/10                 ' Set Left Line Sensor threshold
  RBlackThresh = RLine * 7/10                 ' Set Right Line Sensor threshold

' ********************************************************************************
' ********************************************************************************

' -----[ Program Code ]----------------------------------------------------

Main:
' ********************************************************************************
' ******************** DEFENSIVE CODE ********************************************
' ********************************************************************************
  GOSUB Read_Line_Sensors

' If not on the Shikiri line (border), continue with Offensive action
 BRANCH lineBits, [Offensive_Code, Pivot_Left, Pivot_Right, Backup]

' ********************************************************************************
' ********************************************************************************

' ********************************************************************************
' ******************** OFFENSIVE CODE **** Executes only if not on the edge! *****
' ********************************************************************************
Offensive_Code:

  GOSUB Read_IR_Sensors

  ' If opponent is not in view, scan last known direction. Turn toward
  ' opponent if seen by one "eye" -- if both, lunge forward

  BRANCH irBits, [Search, Spin_Right, Spin_Left, Fast_Fwd]

  GOTO Main

' ********************************************************************************
' ********************************************************************************

Pivot_Left:                                      ' Right line sensor was active, turn left
  FOR Ring_count = 1 TO 100                      ' You can determine how much to pivot
    PULSOUT LMotor, LFastR
    PULSOUT RMotor, RSlowF
    NEXT
  GOTO Main

Pivot_Right:                                     ' Left line sensor was active, turn right
  FOR Ring_count = 1 TO 100                      ' You can determine how much to pivot
    PULSOUT LMotor, LSlowF
    PULSOUT RMotor, RFastR
  NEXT
  GOTO Main

Backup:                                          ' Both sensors on edge of ring
  FOR Ring_count = 1 TO 200                      ' You can determine how far to backup
    PULSOUT LMotor, LFastR
    PULSOUT RMotor, RFastR
  NEXT
  GOTO Pivot_Right                               ' You can decide which way to turn after backing up

Spin_Left:                                      ' right sensor was active
    PULSOUT LMotor, LFastR
    PULSOUT RMotor, RFastF
  GOTO Main

Spin_Right:                                     ' left sensor was active
    PULSOUT LMotor, LFastF
    PULSOUT RMotor, RFastR
  GOTO Main

Halt:                                            ' stop motors
    PULSOUT LMotor, LStop
    PULSOUT RMotor, RStop
    GOTO Main

Slow_Fwd:
    PULSOUT LMotor, LSlowF
    PULSOUT RMotor, RSlowF
  GOTO Main

Fast_Fwd:                                        ' Move forward as fast as possible
    HIGH RedLED
    HIGH Speaker
    PULSOUT LMotor, LFastF
    PULSOUT RMotor, RFastF
    INPUT RedLED                                 ' Blink each time we attack
    LOW Speaker                                  ' Make some noise each time we attack
  GOTO Main

Search:
    PULSOUT LMotor, LFastF
    PULSOUT RMotor, RFastF
  GOTO Main

Lunge:
  FOR Delay_Count = 1 TO 10
    PULSOUT LMotor, LFastF
    PULSOUT RMotor, RFastF
    GOSUB Read_Line_Sensors
    IF (lineBits = %11) THEN Backup
  NEXT
  GOTO Main

' -----[ Subroutines ]-----------------------------------------------------
Dodge:
  FOR Delay_Count = 1 TO 5
    PULSOUT LMotor, LFastF
    PULSOUT RMotor, RFastR
    PAUSE 20
  NEXT
  FOR Delay_Count = 1 TO 20
    PULSOUT LMotor, LFastF
    PULSOUT RMotor, RFastF
    PAUSE 20
  NEXT
  FOR Delay_Count = 1 TO 10
    PULSOUT LMotor, LFastR
    PULSOUT RMotor, RFastF
    PAUSE 20
  NEXT
  GOTO Lunge

Read_Line_Sensors:
  HIGH LLinePwr                                 ' activate sensors
  HIGH RLinePwr
  HIGH LLineIn                                  ' discharge caps
  HIGH RLineIn
  PAUSE 1
  RCTIME LLineIn, 1, lLine                      ' read left sensor
  RCTIME RLineIn, 1, rLine                      ' read right sensor
  LOW LLinePwr                                  ' deactivate sensors
  LOW RLinePwr

  ' convert readings to bits  0 = black, 1 = white line
  IF (lLine < 210) THEN
    lbLeft = 1
  ELSEIF (lLine < 20000) THEN
    lbLeft =0
  ELSE
    lbLeft = 1
  ENDIF

  IF (rLine < 300) THEN
    lbRight = 1
  ELSEIF (rLine < 20000) THEN
    lbRight =0
  ELSE
    lbRight = 1
  ENDIF
  RETURN

Read_IR_Sensors:
  FREQOUT LIROut, AGC, 38500                   ' modulate left IR LED, set AGC level in receiver
  irLeft = ~LIRIn                              ' read input (1 = target)
  FREQOUT RIROut, AGC, 38500                   ' modulate right IR LED, set AGC level in receiver
  irRight = ~RIRIn                             ' read input (1 = target)
 RETURN